'use strict';

var inventors = [{ first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 }, { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 }, { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 }, { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 }, { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 }, { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 }, { first: 'Max', last: 'Planck', year: 1858, passed: 1947 }, { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 }, { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 }, { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 }, { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 }, { first: 'Hanna', last: 'Hammarstr√∂m', year: 1829, passed: 1909 }];

// function to render the table of given data
function tableRender(data, id) {
  var tableBody = document.querySelector('#' + id + ' tbody');

  var dataRows = data.map(function (person, i) {
    return '<tr>\n      <td> ' + (i + 1) + '</td>\n      <td> ' + person.first + ' ' + person.last + '</td>\n      <td> ' + (person.passed - person.year) + '</td>\n      <td> ' + person.year + '</td>\n      <td> ' + person.passed + '</td>\n      </tr>\n      ';
  }).join("");

  tableBody.innerHTML = dataRows;

  console.table(data);
}

// function to render the paragraph of given data

function renderParagraph(data, paragraphID) {
  var Para = document.querySelector('#' + paragraphID);

  var paragraph = data.map(function (p) {
    return p.split(',').reverse().join().replace(',', " ");
  }).join(',');

  Para.innerHTML = paragraph;
}

//  People Dataset
var people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];

window.onload = function () {

  // Fill the inventors Data in the table

  tableRender(inventors, "completeData");

  // Array.prototype.filter()
  // 1. Filter the list of inventors for those who were born in the 1500's


  var born1500s = inventors.filter(function (inventor) {
    return inventor.year >= 1500 && inventor.year <= 1599;
  });

  tableRender(born1500s, "bornIn1500s");

  // Array.prototype.map()
  // 2. Give us an array of the inventors' first and last names

  // Already done in tableRender function


  // Array.prototype.sort()
  // 3. Sort the inventors by birthdate, oldest to youngest

  var orderedByBirth = inventors.sort(function (a, b) {
    return a.year > b.year ? 1 : -1;
  });

  tableRender(orderedByBirth, "orderdBirth");

  // Array.prototype.reduce()
  // 4. How many years did all the inventors live?


  // 5. Sort the inventors by years lived

  var orderedByLived = inventors.sort(function (a, b) {
    return a.passed - a.year > b.passed - b.year ? 1 : -1;
  });

  tableRender(orderedByLived, "orderedLived");

  // Fill the para with data
  renderParagraph(people, "people");

  // 7. sort Exercise
  // Sort the people alphabetically by last name
  var sortedPeople = people.sort(function (lastOne, nextOne) {
    return lastOne.split(', ')[1] > nextOne.split(', ')[1] ? 1 : -1;
  });

  renderParagraph(sortedPeople, "peopleSorted");
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
